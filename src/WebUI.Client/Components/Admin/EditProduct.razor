@page "/admin/product"
@page "/admin/product/{id:int}"
@using Domain.Enums
@using WebUI.Client.Ports
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize(Roles = "Admin")]

@inject NavigationManager NavigationManager
@inject IProductUIService ProductUIService
@inject IProductTypeUIService ProductTypeUIService
@inject ICategoryUIService CategoryUIService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<style>
    img {
        max-height: 200px;
        max-width: 200px;
        margin: 6px;
    }

    .row {
        display: flex;
        padding: 6px;
    }

    .col {
        flex: 1;
    }

    .header {
        display: flex;
        font-weight: 600;
        text-align: center;
        border-bottom: 1px solid lightgray;
        margin-bottom: 6px;
        padding-bottom: 6px;
    }

    .col-visible {
        text-align: center;
    }
</style>

<div class="container mt-5">
    @if(!isLoaded)
    {
        if(string.IsNullOrEmpty(message))
        {
            <MudProgressLinear Color="Color.Info" 
                               Indeterminate="true" 
                               Class="my-7" />
        }
        else
        {
            <MudText Typo="Typo.h5">@message</MudText>
        }
    }
    else
    {
        if (product.Editing)
        {
            <MudText Typo="Typo.h3">Edit "@product.Title"</MudText>
        }
        else if (product.IsNew)
        {
            <MudText Typo="Typo.h3">Create a new product</MudText>
        }

        <EditForm Model="product" OnValidSubmit="CreateOrUpdateProductAsync">
            <MudText Class="mb-2 mt-4" Typo="Typo.h5">Essentials</MudText>
            <DataAnnotationsValidator />
            <div class="mb-3 mt-3">
                <MudTextField T="string" 
                              Label="Title" 
                              Variant="Variant.Outlined" 
                              Required="true" 
                              RequiredError="Title is required!" 
                              @bind-Value="product.Title" />
            </div>
            <div class="mb-3">
                <MudTextField T="string"
                              Lines="3"
                              Label="Description" 
                              Variant="Variant.Outlined"
                              @bind-Value="product.Description" />
            </div>
            <MudSwitch Class="mt-3" 
                       Label="Featured" 
                       Color="Color.Info" 
                       @bind-Value="product.Featured" />
            <MudSwitch Class="mb-3" 
                       Label="Visible" 
                       Color="Color.Info" 
                       @bind-Value="product.Visible" />

            <MudText Class="mb-2 mt-4" Typo="Typo.h5">Images (at least one)</MudText>
            <div class="d-flex flex-column">
                @if (product.Images.Count > 0)
                {
                    <div style="display: flex; flex-wrap: wrap; flex-direction: row;">
                        @foreach (Image image in product.Images)
                        {
                            <MudCard Class="ma-2">
                                <MudCardContent>
                                    <MudImage Src="@image.Data" />
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                }
            </div>
            <div class="mb-3">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" 
                               OnFilesChanged="OnFileChangeAsync" 
                               Hidden="false" 
                               Class="flex-1" 
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" 
                               InputStyle="opacity:0"
                               @ondragenter="@SetDragClass" 
                               @ondragleave="@ClearDragClass" 
                               @ondragend="@ClearDragClass">
                    <ActivatorContent>
                        <MudPaper Height="300px"
                                  Outlined="true"
                                  Class="@DragClass">
                            <MudText Typo="Typo.h6">
                                Drag and drop files here or click
                            </MudText>
                            @foreach (var file in fileNames)
                            {
                                <MudChip T="string"
                                         Color="Color.Dark"
                                         Text="@file"
                                         tabindex="-1" />
                            }
                        </MudPaper>
                    </ActivatorContent>
                </MudFileUpload>
                <MudSwitch Class="mb-3"
                           Label="Send Drag and Drop files to Cloudinary"
                           Color="Color.Info"
                           @bind-Value="cloudinaryUpload" />
                <MudToolBar DisableGutters="true" Class="gap-4 mt-3 justify-content-between">
                    <MudTextField @bind-Value="imageUrl"
                                    Label="Add image by Url"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Add"
                                    OnAdornmentClick="AddImageByUrl" />
                    <MudButton OnClick="ClearImagesAsync" 
                               Disabled="@(product.Images.Count == 0)"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Color="Color.Error" 
                               Variant="Variant.Filled">
                        Clear Images
                    </MudButton>
                </MudToolBar>
            </div>

            <MudText Class="mb-2 mt-4" 
                     Typo="Typo.h5">
                @(product.Variants.Count > 1 ? "Variants" : "Variant")
            </MudText>

            <div class="header">
                <div class="col">Product Type</div>
                <div class="col">Price</div>
                <div class="col">Original Price</div>
                <div class="col">Visible</div>
                <div class="col"></div>
            </div>
            @foreach(ProductVariant variant in product.Variants)
            {
                <div class="row">
                    <div class="col">
                        <InputSelect disabled="@variant.IsSoftDeleted" @bind-Value="variant.ProductTypeId" class="form-control">
                            @foreach(ProductType productType in ProductTypeUIService.ProductTypes)
                            {
                                <option value="@productType.Id.ToString()">@productType.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.IsSoftDeleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.IsSoftDeleted"></InputNumber>
                    </div>
                    <div class="col col-visible">
                        <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.IsSoftDeleted"></InputCheckbox>
                    </div>
                    <div class="col">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                       Color="Color.Error" aria-label="delete" 
                                       Disabled="variant.IsSoftDeleted" 
                                       Class="float-end" 
                                       OnClick="(() => RemoveVariant(variant.ProductTypeId))" />
                    </div>
                </div>
            }
            <MudButton Variant="Variant.Filled" 
                       StartIcon="@Icons.Material.Filled.Add" 
                       Color="Color.Info" 
                       @onclick="AddVariant">
                Add Variant
            </MudButton>

            <hr />
            <div class="mb-3">
                <MudText Class="mb-2 mt-4" 
                         Typo="Typo.h5">
                    Category
                </MudText>
                <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                    @foreach(Category category in CategoryUIService.AdminCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <hr />
            <MudButton ButtonType="ButtonType.Submit" 
                       Class="float-end mb-3 ml-2" 
                       Variant="Variant.Filled" 
                       StartIcon="@Icons.Material.Filled.Save" 
                       Color="Color.Info">
                @btnText
            </MudButton>
            <ValidationSummary class="mb-3"></ValidationSummary>
        </EditForm>
        @if (!product.IsNew)
        {
            <MudButton Class="float-end" 
                       Variant="Variant.Filled" 
                       StartIcon="@Icons.Material.Filled.Delete" 
                       Color="Color.Error" 
                       @onclick="DeleteProductAsync">
                Delete Product
            </MudButton>
        }
        <MudButton Href="admin/products" 
                   Class="float-start mb-3" 
                   Variant="Variant.Filled" 
                   StartIcon="@Icons.Material.Filled.ArrowBack" 
                   Color="Color.Info">
            Go back
        </MudButton>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product product = new();
    private string btnText = "";
    private bool isLoaded = false;
    private bool cloudinaryUpload = false;
    private string message = string.Empty;

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new();
    private string imageUrl = string.Empty;

    protected sealed override async Task OnInitializedAsync()
    {
        await ProductTypeUIService.GetProductTypesAsync();
        await CategoryUIService.GetAdminCategoriesAsync();
    }

    protected sealed override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new()
            {
                IsNew = true
            };
            btnText = "Create Product";
        }
        else
        {
            Product? dbProduct = await ProductUIService.GetProductByIdAsync(Id);
            if (dbProduct is null)
            {
                message = $"Product with Id '{Id}' does not exist.";
                return;
            }

            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        isLoaded = true;
    }

    private void RemoveVariant(int productTypeId)
    {
        ProductVariant? variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);

        if (variant is null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.IsSoftDeleted = true;
        }
    }

    private void AddVariant()
    {
        product.Variants.Add(new()
        {
            IsNew = true,
            ProductId = product.Id
        });
    }

    private async Task CreateOrUpdateProductAsync()
    {
        if (product.IsNew)
        {
            Product result = await ProductUIService.CreateProductAsync(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductUIService.UpdateProductAsync(product) ?? new();
            NavigationManager.NavigateTo($"admin/product/{product!.Id}", true);
        }
    }

    private async Task DeleteProductAsync()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete '{product.Title}'?");

        if (confirmed)
        {
            await ProductUIService.DeleteProductAsync(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    private void AddImageByUrl()
    {
        product.Images.Add(
            new Image
            {
                Type = ImageType.Url,
                Data = imageUrl,
                IsNew = true
            }
        );

        imageUrl = string.Empty;
    }

    private async Task OnFileChangeAsync(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        IReadOnlyList<IBrowserFile> files = e.GetMultipleFiles();
        foreach (IBrowserFile file in files)
        {
            fileNames.Add(file.Name);
        }

        string format = "image/png";
        foreach (IBrowserFile image in e.GetMultipleFiles(int.MaxValue))
        {
            IBrowserFile resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            byte[] buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            string imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            product.Images.Add(
                new Image
                {
                    Type = cloudinaryUpload ? ImageType.Cloudinary : ImageType.Base64,
                    Data = imageData,
                    IsNew = true
                }
            );
        }
    }

    private async Task ClearImagesAsync()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        product.Images.Clear();
    }

    private void SetDragClass() 
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
